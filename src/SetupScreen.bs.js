// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Hue = require("./Hue.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var BaseStation = require("./BaseStation.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("SetupScreen");

function discoverStationsEv(_, self) {
  return Curry._1(self[/* send */3], /* StartDiscovering */1);
}

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* StartDiscovering */1);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* status */2];
              var tmp;
              switch (match) {
                case 0 : 
                    var __x = self[/* state */1][/* discoveredStations */0];
                    tmp = Belt_List.toArray(Belt_List.map(__x, (function (station) {
                                return ReasonReact.element(station[/* id */0], undefined, BaseStation.make(station, /* array */[]));
                              })));
                    break;
                case 1 : 
                    tmp = "Discovering stations...";
                    break;
                case 2 : 
                    tmp = React.createElement("div", undefined, "Failed to discover base stations.", React.createElement("button", {
                              onClick: Curry._1(self[/* handle */0], discoverStationsEv)
                            }, "Try again"));
                    break;
                
              }
              return React.createElement("div", {
                          className: "container"
                        }, React.createElement("h1", undefined, "Discovered BaseStations"), React.createElement("div", undefined, tmp));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* discoveredStations : [] */0,
                      /* stations : [] */0,
                      /* status : Loading */1
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* record */[
                              /* discoveredStations */state[/* discoveredStations */0],
                              /* stations */state[/* stations */1],
                              /* status : Loading */1
                            ],
                            (function (self) {
                                Hue.discover(/* () */0).then((function (stations) {
                                          return Promise.resolve(Curry._1(self[/* send */3], /* BaseStationsDiscovered */[stations]));
                                        })).catch((function () {
                                        return Promise.resolve(Curry._1(self[/* send */3], /* DiscoveryError */0));
                                      }));
                                return /* () */0;
                              })
                          ]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* discoveredStations */state[/* discoveredStations */0],
                              /* stations */state[/* stations */1],
                              /* status : Failed */2
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* discoveredStations */action[0],
                            /* stations */state[/* stations */1],
                            /* status : Success */0
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.discoverStationsEv = discoverStationsEv;
exports.make = make;
/* component Not a pure module */
