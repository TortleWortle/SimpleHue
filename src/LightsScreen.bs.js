// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Hue = require("./Hue.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var SimpleLight = require("./SimpleLight.bs.js");

var component = ReasonReact.reducerComponent("LightsScreen");

function make(station, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var intervalId = setInterval((function () {
                      return Curry._1(self[/* send */3], /* LoadLights */0);
                    }), 5000);
              Curry._1(self[/* onUnmount */4], (function () {
                      clearInterval(intervalId);
                      return /* () */0;
                    }));
              return Curry._1(self[/* send */3], /* LoadLights */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* status */1];
              var tmp;
              switch (match) {
                case 0 : 
                    tmp = "Loading lights...";
                    break;
                case 1 : 
                    tmp = "Failed to load lights.";
                    break;
                case 2 : 
                    tmp = "Lights loaded.";
                    break;
                
              }
              var __x = self[/* state */1][/* lights */0];
              return React.createElement("div", {
                          className: "container"
                        }, React.createElement("button", {
                              onClick: (function () {
                                  return Curry._1(self[/* send */3], /* LoadLights */0);
                                })
                            }, "Refresh"), tmp, React.createElement("table", {
                              className: "table"
                            }, React.createElement("thead", undefined, React.createElement("tr", undefined, React.createElement("th", undefined, "Id"), React.createElement("th", undefined, "Name"), React.createElement("th", undefined, "Brightness"), React.createElement("th", undefined, "Toggle"))), React.createElement("tbody", undefined, Belt_List.toArray(Belt_List.map(__x, (function (light) {
                                            return ReasonReact.element(light[/* id */0] + Pervasives.string_of_bool(light[/* state */1][/* on */0]), undefined, SimpleLight.make(light, /* array */[]));
                                          }))))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* lights : [] */0,
                      /* status : Loading */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* UpdateWithSideEffects */Block.__(2, [
                                /* record */[
                                  /* lights */state[/* lights */0],
                                  /* status : Loading */0
                                ],
                                (function (self) {
                                    Hue.getLights(station).then((function (lights) {
                                              return Promise.resolve(Curry._1(self[/* send */3], /* LightsLoaded */[lights]));
                                            })).catch((function () {
                                            return Promise.resolve(Curry._1(self[/* send */3], /* LightsFailed */2));
                                          }));
                                    return /* () */0;
                                  })
                              ]);
                  case 1 : 
                      return /* SideEffects */Block.__(1, [(function (self) {
                                    Hue.getLights(station).then((function (lights) {
                                              return Promise.resolve(Curry._1(self[/* send */3], /* LightsLoaded */[lights]));
                                            })).catch((function () {
                                            return Promise.resolve(Curry._1(self[/* send */3], /* LightsFailed */2));
                                          }));
                                    return /* () */0;
                                  })]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* lights */state[/* lights */0],
                                  /* status : Failed */1
                                ]]);
                  
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* lights */action[0],
                            /* status : Loaded */2
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
