// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var NoBaseStation = Caml_exceptions.create("Hue.NoBaseStation");

function decodeDiscoveredStation(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* internalipaddress */Json_decode.field("internalipaddress", Json_decode.string, json)
        ];
}

function discoveredStations(json) {
  return Json_decode.list(decodeDiscoveredStation, json);
}

function baseStation(json) {
  return /* record */[
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* datastoreversion */Json_decode.field("datastoreversion", Json_decode.string, json),
          /* swversion */Json_decode.field("swversion", Json_decode.string, json),
          /* apiversion */Json_decode.field("apiversion", Json_decode.string, json),
          /* mac */Json_decode.field("mac", Json_decode.string, json),
          /* bridgeid */Json_decode.field("swversion", Json_decode.string, json),
          /* factorynew */Json_decode.field("factorynew", Json_decode.bool, json),
          /* replacesbridgeid */Json_decode.field("replacesbridgeid", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          /* modelid */Json_decode.field("modelid", Json_decode.string, json),
          /* starterkitid */Json_decode.field("starterkitid", Json_decode.string, json)
        ];
}

function linkSuccess(json) {
  return /* record */[/* username */Json_decode.field("username", Json_decode.string, json)];
}

function linkResponse(json) {
  return /* record */[/* success */Json_decode.field("success", (function (param) {
                  return Json_decode.optional(linkSuccess, param);
                }), json)];
}

function linkResponses(json) {
  return Json_decode.list(linkResponse, json);
}

var Decode = /* module */[
  /* decodeDiscoveredStation */decodeDiscoveredStation,
  /* discoveredStations */discoveredStations,
  /* baseStation */baseStation,
  /* linkSuccess */linkSuccess,
  /* linkResponse */linkResponse,
  /* linkResponses */linkResponses
];

function discover() {
  return fetch("https://discovery.meethue.com").then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.list(decodeDiscoveredStation, json));
              }));
}

function getInfo(station) {
  return fetch("http://" + (station[/* internalipaddress */1] + "/api/config")).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(baseStation(json));
              }));
}

function linkWithStation(station) {
  var payload = { };
  payload["devicetype"] = "SimpleHue#WebClient";
  return fetch("http://" + (station[/* internalipaddress */1] + "/api"), Fetch.RequestInit[/* make */0](/* Post */2, {
                        "Content-Type": "application/json"
                      }, Js_primitive.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(Json_decode.list(linkResponse, json));
              }));
}

function linkedStation(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.string, json),
          /* ip */Json_decode.field("ip", Json_decode.string, json),
          /* username */Json_decode.field("username", Json_decode.string, json),
          /* timestamp */Json_decode.field("timestamp", Json_decode.string, json)
        ];
}

var LSDecode = /* module */[/* linkedStation */linkedStation];

function linkedStation$1(station) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "id",
                station[/* id */0]
              ],
              /* :: */[
                /* tuple */[
                  "ip",
                  station[/* ip */1]
                ],
                /* :: */[
                  /* tuple */[
                    "username",
                    station[/* username */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "timestamp",
                      station[/* timestamp */3]
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]);
}

var LSEncode = /* module */[/* linkedStation */linkedStation$1];

function getLinkedStation() {
  var stationString = localStorage.getItem("linkedStation");
  if (stationString !== null) {
    return linkedStation(Json.parseOrRaise(stationString));
  }
  
}

function isLinked(id) {
  var match = getLinkedStation(/* () */0);
  if (match !== undefined) {
    return match[/* id */0] === id;
  } else {
    return false;
  }
}

function setLinkedStation(station) {
  localStorage.setItem("linkedStation", Json.stringify(linkedStation$1(station)));
  return /* () */0;
}

function unlinkStation() {
  localStorage.removeItem("linkedStation");
  return /* () */0;
}

function lightState(json) {
  return /* record */[
          /* on */Json_decode.field("on", Json_decode.bool, json),
          /* brightness */Json_decode.field("bri", Json_decode.$$int, json),
          /* hue */Json_decode.optional((function (param) {
                  return Json_decode.field("hue", Json_decode.$$int, param);
                }), json),
          /* sat */Json_decode.optional((function (param) {
                  return Json_decode.field("sat", Json_decode.$$int, param);
                }), json)
        ];
}

function light(json, id) {
  return /* record */[
          /* id */id,
          /* state */Json_decode.field("state", lightState, json),
          /* name */Json_decode.field("name", Json_decode.string, json)
        ];
}

function lightsResponse(json) {
  var __x = Js_dict.entries(Belt_Option.getExn(Js_json.decodeObject(json)));
  return Belt_List.fromArray(Belt_Array.map(__x, (function (param) {
                    return light(param[1], param[0]);
                  })));
}

var LDecode = /* module */[
  /* lightState */lightState,
  /* light */light,
  /* lightsResponse */lightsResponse
];

function getLights(station) {
  return fetch("http://" + (station[/* ip */1] + ("/api/" + (station[/* username */2] + "/lights")))).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                return Promise.resolve(lightsResponse(json));
              }));
}

function updateLight(light) {
  var match = getLinkedStation(/* () */0);
  var station;
  if (match !== undefined) {
    station = match;
  } else {
    throw NoBaseStation;
  }
  return fetch("http://" + (station[/* ip */1] + ("/api/" + (station[/* username */2] + ("/lights/" + (light[/* id */0] + "/state"))))), Fetch.RequestInit[/* make */0](/* Put */3, {
                      "Content-Type": "application/json"
                    }, Js_primitive.some(JSON.stringify(Json_encode.object_(/* :: */[
                                  /* tuple */[
                                    "on",
                                    light[/* state */1][/* on */0]
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "bri",
                                      light[/* state */1][/* brightness */1]
                                    ],
                                    /* [] */0
                                  ]
                                ]))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                return prim.json();
              }));
}

exports.NoBaseStation = NoBaseStation;
exports.Decode = Decode;
exports.discover = discover;
exports.getInfo = getInfo;
exports.linkWithStation = linkWithStation;
exports.LSDecode = LSDecode;
exports.LSEncode = LSEncode;
exports.getLinkedStation = getLinkedStation;
exports.isLinked = isLinked;
exports.setLinkedStation = setLinkedStation;
exports.unlinkStation = unlinkStation;
exports.LDecode = LDecode;
exports.getLights = getLights;
exports.updateLight = updateLight;
/* Js_dict Not a pure module */
